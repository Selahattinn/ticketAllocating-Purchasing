// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/ticket/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Selahattinn/ticketAllocating-Purchasing/internal/api/ticket/model"
	gomock "github.com/golang/mock/gomock"
)

// MockITicketRepository is a mock of ITicketRepository interface.
type MockITicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITicketRepositoryMockRecorder
}

// MockITicketRepositoryMockRecorder is the mock recorder for MockITicketRepository.
type MockITicketRepositoryMockRecorder struct {
	mock *MockITicketRepository
}

// NewMockITicketRepository creates a new mock instance.
func NewMockITicketRepository(ctrl *gomock.Controller) *MockITicketRepository {
	mock := &MockITicketRepository{ctrl: ctrl}
	mock.recorder = &MockITicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITicketRepository) EXPECT() *MockITicketRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITicketRepository) Create(ctx context.Context, ticket model.CreateTicketRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ticket)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITicketRepositoryMockRecorder) Create(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITicketRepository)(nil).Create), ctx, ticket)
}

// Get mocks base method.
func (m *MockITicketRepository) Get(ctx context.Context, ticket model.GetTicketRequest) (*model.GetTicketResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ticket)
	ret0, _ := ret[0].(*model.GetTicketResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockITicketRepositoryMockRecorder) Get(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITicketRepository)(nil).Get), ctx, ticket)
}

// Purchase mocks base method.
func (m *MockITicketRepository) Purchase(ctx context.Context, ticket model.PurchaseTicketRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purchase", ctx, ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purchase indicates an expected call of Purchase.
func (mr *MockITicketRepositoryMockRecorder) Purchase(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purchase", reflect.TypeOf((*MockITicketRepository)(nil).Purchase), ctx, ticket)
}
