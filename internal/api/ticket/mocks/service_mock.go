// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/ticket/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Selahattinn/ticketAllocating-Purchasing/internal/api/ticket/model"
	gomock "github.com/golang/mock/gomock"
)

// MockITicketService is a mock of ITicketService interface.
type MockITicketService struct {
	ctrl     *gomock.Controller
	recorder *MockITicketServiceMockRecorder
}

// MockITicketServiceMockRecorder is the mock recorder for MockITicketService.
type MockITicketServiceMockRecorder struct {
	mock *MockITicketService
}

// NewMockITicketService creates a new mock instance.
func NewMockITicketService(ctrl *gomock.Controller) *MockITicketService {
	mock := &MockITicketService{ctrl: ctrl}
	mock.recorder = &MockITicketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITicketService) EXPECT() *MockITicketServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITicketService) Create(ctx context.Context, ticket model.CreateTicketRequest) (*model.CreateTicketResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ticket)
	ret0, _ := ret[0].(*model.CreateTicketResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITicketServiceMockRecorder) Create(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITicketService)(nil).Create), ctx, ticket)
}

// Get mocks base method.
func (m *MockITicketService) Get(ctx context.Context, ticket model.GetTicketRequest) (*model.GetTicketResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ticket)
	ret0, _ := ret[0].(*model.GetTicketResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockITicketServiceMockRecorder) Get(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITicketService)(nil).Get), ctx, ticket)
}

// Purchase mocks base method.
func (m *MockITicketService) Purchase(ctx context.Context, ticket model.PurchaseTicketRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purchase", ctx, ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purchase indicates an expected call of Purchase.
func (mr *MockITicketServiceMockRecorder) Purchase(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purchase", reflect.TypeOf((*MockITicketService)(nil).Purchase), ctx, ticket)
}
